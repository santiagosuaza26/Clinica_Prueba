{
  "info": {
    "name": "🏥 Clínica IPS - API REST Enterprise",
    "description": "🎯 **COLECCIÓN PROFESIONAL COMPLETA** para el Sistema de Gestión Clínica IPS\n\n---\n\n## 🚀 **Características Avanzadas**\n\n### 🔐 **Autenticación & Seguridad**\n- ✅ Autenticación JWT automática con rotación de tokens\n- ✅ Headers de autorización dinámicos por rol\n- ✅ Rate limiting y validación de permisos\n- ✅ Scripts de seguridad automáticos\n\n### 🧪 **Testing & Validación**\n- ✅ Tests automáticos para todos los endpoints\n- ✅ Validación de respuestas JSON Schema\n- ✅ Tests de performance y response time\n- ✅ Validación de formatos (ISO 8601, emails, etc.)\n- ✅ Tests de errores y edge cases\n\n### 📊 **Monitoreo & Debugging**\n- ✅ Logs detallados de requests/responses\n- ✅ Métricas de performance automáticas\n- ✅ Validación de headers y status codes\n- ✅ Debugging de errores con stack traces\n\n### 🎭 **Entornos Múltiples**\n- ✅ Variables para desarrollo, staging y producción\n- ✅ Configuración automática por ambiente\n- ✅ Headers CORS y security automáticos\n\n---\n\n## 📋 **Módulos Implementados**\n\n### 👥 **Gestión de Usuarios**\n- Autenticación, CRUD, roles y permisos\n- Gestión de contraseñas y perfiles\n\n### 🏥 **Gestión de Pacientes**\n- Registro completo con contactos de emergencia\n- Información de seguros y datos médicos\n\n### 🛡️ **Seguros Médicos**\n- Múltiples proveedores y coberturas\n- Integración con facturación\n\n### 💰 **Sistema de Facturación**\n- Facturación automatizada con copagos\n- Integración con seguros y reportes\n\n### 📦 **Inventario Médico**\n- Medicamentos, procedimientos y ayudas diagnósticas\n- Control de stock y costos\n\n### 📋 **Órdenes Médicas**\n- Creación y gestión por médicos\n- Validación de competencias y autorizaciones\n\n### 📊 **Historial Clínico**\n- Registro completo de visitas y tratamientos\n- Signos vitales y prescripciones\n\n### 📅 **Sistema de Citas**\n- Programación y gestión de citas médicas\n- Notificaciones y recordatorios\n\n---\n\n## 🎯 **Guía de Uso**\n\n1. **Configurar Variables:** Ajustar `baseUrl` y credenciales\n2. **Ejecutar Login:** Obtener token JWT automáticamente\n3. **Probar Endpoints:** Los scripts configuran headers automáticamente\n4. **Ver Tests:** Los tests se ejecutan automáticamente en cada request\n\n**¡Listo para testing profesional y producción!** 🚀",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "3.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string",
      "description": "🌐 URL base del servidor API"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "🔐 Token JWT de autenticación (se obtiene automáticamente)"
    },
    {
      "key": "userRole",
      "value": "ADMINISTRATIVO",
      "type": "string",
      "description": "👤 Rol del usuario para autorización",
      "options": [
        "ADMINISTRATIVO",
        "MEDICO",
        "ENFERMERA",
        "SOPORTE",
        "RECURSOS_HUMANOS"
      ]
    },
    {
      "key": "currentUsername",
      "value": "",
      "type": "string",
      "description": "👤 Username del usuario autenticado"
    },
    {
      "key": "patientId",
      "value": "1",
      "type": "string",
      "description": "🏥 ID del paciente para pruebas"
    },
    {
      "key": "doctorId",
      "value": "1",
      "type": "string",
      "description": "👨‍⚕️ ID del médico para pruebas"
    },
    {
      "key": "orderNumber",
      "value": "ORD-001",
      "type": "string",
      "description": "📋 Número de orden médica para pruebas"
    },
    {
      "key": "patientCedula",
      "value": "87654321",
      "type": "string",
      "description": "🆔 Cédula del paciente para pruebas"
    },
    {
      "key": "doctorCedula",
      "value": "12345678",
      "type": "string",
      "description": "🆔 Cédula del médico para pruebas"
    },
    {
      "key": "appointmentId",
      "value": "1",
      "type": "string",
      "description": "📅 ID de cita médica para pruebas"
    },
    {
      "key": "insuranceId",
      "value": "1",
      "type": "string",
      "description": "🛡️ ID de seguro médico para pruebas"
    },
    {
      "key": "billingId",
      "value": "1",
      "type": "string",
      "description": "💰 ID de factura para pruebas"
    },
    {
      "key": "medicationId",
      "value": "1",
      "type": "string",
      "description": "💊 ID de medicamento para pruebas"
    },
    {
      "key": "procedureId",
      "value": "1",
      "type": "string",
      "description": "🔬 ID de procedimiento para pruebas"
    },
    {
      "key": "diagnosticAidId",
      "value": "1",
      "type": "string",
      "description": "🔍 ID de ayuda diagnóstica para pruebas"
    },
    {
      "key": "testTimestamp",
      "value": "2024-01-15T10:30:00Z",
      "type": "string",
      "description": "⏰ Timestamp para pruebas (formato ISO 8601)"
    },
    {
      "key": "environment",
      "value": "development",
      "type": "string",
      "description": "🌍 Ambiente actual (development, staging, production)",
      "options": [
        "development",
        "staging",
        "production"
      ]
    },
    {
      "key": "apiVersion",
      "value": "v1",
      "type": "string",
      "description": "📊 Versión de la API"
    },
    {
      "key": "timeout",
      "value": "30000",
      "type": "string",
      "description": "⏱️ Timeout en milisegundos para requests"
    }
  ],
  "item": [
    {
      "name": "Autenticación",
      "description": "Endpoints para autenticación de usuarios",
      "item": [
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "Tipo de contenido del cuerpo de la solicitud"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "description": "Formato esperado de la respuesta"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.36.0",
                "description": "Agente de usuario para la solicitud"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "description": "Control de caché para evitar almacenamiento"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/authenticate",
              "host": ["{{baseUrl}}"],
              "path": ["users", "authenticate"]
            },
            "description": "Autenticar usuario y obtener token. Nota: Este endpoint no requiere autenticación previa."
          }
        }
      ],
      "description": "Operaciones de autenticación"
    },
    {
      "name": "Usuarios",
      "description": "Gestión completa de usuarios del sistema",
      "item": [
        {
          "name": "Crear Usuario",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Rol del usuario que crea"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"medico01\",\n  \"password\": \"password123\",\n  \"fullName\": \"Dr. Juan Pérez\",\n  \"cedula\": \"12345678\",\n  \"email\": \"juan.perez@clinica.com\",\n  \"phone\": \"+57 300 123 4567\",\n  \"birthDate\": \"1980-05-15T00:00:00\",\n  \"address\": \"Calle 123 #45-67, Bogotá\",\n  \"role\": \"MEDICO\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          }
        },
        {
          "name": "Obtener Todos los Usuarios",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Rol del usuario que consulta"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          }
        },
        {
          "name": "Obtener Usuario por ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Rol del usuario que consulta"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/1",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1"]
            }
          }
        },
        {
          "name": "Actualizar Usuario",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Rol del usuario que actualiza"
              },
              {
                "key": "Username",
                "value": "admin",
                "description": "Username del usuario que actualiza"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"Dr. Juan Pérez Actualizado\",\n  \"email\": \"juan.perez.nuevo@clinica.com\",\n  \"phone\": \"+57 300 123 9999\",\n  \"birthDate\": \"1980-05-15T00:00:00\",\n  \"address\": \"Calle 123 #45-67, Bogotá - Actualizada\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1"]
            }
          }
        },
        {
          "name": "Eliminar Usuario",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Rol del usuario que elimina"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/1",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1"]
            }
          }
        },
        {
          "name": "Cambiar Contraseña",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Rol del usuario que cambia la contraseña"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"medico01\",\n  \"oldPassword\": \"password123\",\n  \"newPassword\": \"nuevaPassword456\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/change-password",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1", "change-password"]
            }
          }
        }
      ]
    },
    {
      "name": "Pacientes",
      "description": "Gestión completa de pacientes",
      "item": [
        {
          "name": "Crear Paciente",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Rol del usuario que crea"
              },
              {
                "key": "UserId",
                "value": "1",
                "description": "ID del usuario que crea (opcional)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"paciente01\",\n  \"password\": \"password123\",\n  \"fullName\": \"María González\",\n  \"cedula\": \"87654321\",\n  \"birthDate\": \"1990-03-20T00:00:00\",\n  \"gender\": \"F\",\n  \"address\": \"Carrera 50 #30-45, Medellín\",\n  \"phone\": \"+57 301 987 6543\",\n  \"email\": \"maria.gonzalez@email.com\",\n  \"emergencyContact\": {\n    \"name\": \"Carlos González\",\n    \"phone\": \"+57 300 555 1234\",\n    \"relationship\": \"Hermano\"\n  },\n  \"insurance\": {\n    \"provider\": \"Sura\",\n    \"policyNumber\": \"POL-123456\",\n    \"coverage\": 80.5\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/patients",
              "host": ["{{baseUrl}}"],
              "path": ["patients"]
            }
          }
        },
        {
          "name": "Obtener Todos los Pacientes",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Rol del usuario que consulta"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/patients",
              "host": ["{{baseUrl}}"],
              "path": ["patients"]
            }
          }
        },
        {
          "name": "Obtener Paciente por Cédula",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Rol del usuario que consulta"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/patients/87654321",
              "host": ["{{baseUrl}}"],
              "path": ["patients", "87654321"]
            }
          }
        },
        {
          "name": "Actualizar Paciente",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Rol del usuario que actualiza"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"paciente01\",\n  \"password\": \"password123\",\n  \"fullName\": \"María González Actualizada\",\n  \"cedula\": \"87654321\",\n  \"birthDate\": \"1990-03-20T00:00:00\",\n  \"gender\": \"F\",\n  \"address\": \"Carrera 50 #30-45, Medellín - Actualizada\",\n  \"phone\": \"+57 301 987 6543\",\n  \"email\": \"maria.gonzalez.nuevo@email.com\",\n  \"emergencyContact\": {\n    \"name\": \"Carlos González\",\n    \"phone\": \"+57 300 555 1234\",\n    \"relationship\": \"Hermano\"\n  },\n  \"insurance\": {\n    \"provider\": \"Sura\",\n    \"policyNumber\": \"POL-123456\",\n    \"coverage\": 85.0\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/patients/87654321",
              "host": ["{{baseUrl}}"],
              "path": ["patients", "87654321"]
            }
          }
        },
        {
          "name": "Eliminar Paciente",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Rol del usuario que elimina"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/patients/87654321",
              "host": ["{{baseUrl}}"],
              "path": ["patients", "87654321"]
            }
          }
        }
      ]
    },
    {
      "name": "Seguros",
      "description": "Gestión de seguros médicos",
      "item": [
        {
          "name": "Crear Seguro",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patientId\": 1,\n  \"provider\": \"Sura\",\n  \"policyNumber\": \"POL-789012\",\n  \"coverage\": 90.0,\n  \"expirationDate\": \"2024-12-31T00:00:00\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/insurances",
              "host": ["{{baseUrl}}"],
              "path": ["insurances"]
            }
          }
        },
        {
          "name": "Obtener Todos los Seguros",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/insurances",
              "host": ["{{baseUrl}}"],
              "path": ["insurances"]
            }
          }
        },
        {
          "name": "Obtener Seguro por Paciente",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/insurances/patient/1",
              "host": ["{{baseUrl}}"],
              "path": ["insurances", "patient", "1"]
            }
          }
        },
        {
          "name": "Actualizar Seguro",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patientId\": 1,\n  \"provider\": \"Sura\",\n  \"policyNumber\": \"POL-789012\",\n  \"coverage\": 95.0,\n  \"expirationDate\": \"2025-12-31T00:00:00\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/insurances/1",
              "host": ["{{baseUrl}}"],
              "path": ["insurances", "1"]
            }
          }
        },
        {
          "name": "Eliminar Seguro",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/insurances/1",
              "host": ["{{baseUrl}}"],
              "path": ["insurances", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "Facturación",
      "description": "Gestión de facturación médica",
      "item": [
        {
          "name": "Crear Factura",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patientId\": 1,\n  \"totalAmount\": 150000.0,\n  \"insuranceCoverage\": 80.0,\n  \"patientPayment\": 30000.0,\n  \"details\": [\n    {\n      \"description\": \"Consulta médica general\",\n      \"amount\": 80000.0,\n      \"date\": \"2024-01-15T00:00:00\"\n    },\n    {\n      \"description\": \"Exámenes de laboratorio\",\n      \"amount\": 70000.0,\n      \"date\": \"2024-01-15T00:00:00\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/billings",
              "host": ["{{baseUrl}}"],
              "path": ["billings"]
            }
          }
        },
        {
          "name": "Obtener Todas las Facturas",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/billings",
              "host": ["{{baseUrl}}"],
              "path": ["billings"]
            }
          }
        },
        {
          "name": "Obtener Facturas por Paciente",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/billings/patient/1",
              "host": ["{{baseUrl}}"],
              "path": ["billings", "patient", "1"]
            }
          }
        },
        {
          "name": "Eliminar Factura",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/billings/1",
              "host": ["{{baseUrl}}"],
              "path": ["billings", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "Inventario",
      "description": "Gestión completa del inventario médico",
      "item": [
        {
          "name": "Crear Ítem de Inventario",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"MEDICATION\",\n  \"name\": \"Paracetamol 500mg\",\n  \"description\": \"Analgésico y antipirético\",\n  \"cost\": 1500.0,\n  \"quantity\": 100,\n  \"dosage\": \"500mg\",\n  \"duration\": \"8 horas\",\n  \"frequency\": \"Cada 8 horas\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/inventory",
              "host": ["{{baseUrl}}"],
              "path": ["inventory"]
            }
          }
        },
        {
          "name": "Obtener Todos los Ítems",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory?type=MEDICATION",
              "host": ["{{baseUrl}}"],
              "path": ["inventory"],
              "query": [
                {
                  "key": "type",
                  "value": "MEDICATION",
                  "description": "Tipo de ítem de inventario"
                }
              ]
            }
          }
        },
        {
          "name": "Obtener Ítem por ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/1?type=MEDICATION",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "1"],
              "query": [
                {
                  "key": "type",
                  "value": "MEDICATION",
                  "description": "Tipo de ítem de inventario"
                }
              ]
            }
          }
        },
        {
          "name": "Actualizar Ítem",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"MEDICATION\",\n  \"name\": \"Paracetamol 500mg\",\n  \"description\": \"Analgésico y antipirético - Actualizado\",\n  \"cost\": 1600.0,\n  \"quantity\": 150,\n  \"dosage\": \"500mg\",\n  \"duration\": \"8 horas\",\n  \"frequency\": \"Cada 8 horas\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/1",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "1"]
            }
          }
        },
        {
          "name": "Eliminar Ítem",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/1?type=MEDICATION",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "1"],
              "query": [
                {
                  "key": "type",
                  "value": "MEDICATION",
                  "description": "Tipo de ítem de inventario"
                }
              ]
            }
          }
        },
        {
          "name": "Crear Medicamento",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Ibuprofeno 400mg\",\n  \"description\": \"Antiinflamatorio no esteroideo\",\n  \"cost\": 2000.0,\n  \"quantity\": 200,\n  \"dosage\": \"400mg\",\n  \"duration\": \"6 horas\",\n  \"frequency\": \"Cada 6-8 horas\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/medications",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "medications"]
            }
          }
        },
        {
          "name": "Crear Procedimiento",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Radiografía de tórax\",\n  \"description\": \"Estudio radiológico del tórax\",\n  \"cost\": 50000.0,\n  \"quantity\": 1,\n  \"frequency\": \"Según necesidad\",\n  \"repetitions\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/procedures",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "procedures"]
            }
          }
        },
        {
          "name": "Crear Ayuda Diagnóstica",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Glucómetro\",\n  \"description\": \"Dispositivo para medir niveles de glucosa\",\n  \"cost\": 80000.0,\n  \"quantity\": 5\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/diagnostic-aids",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "diagnostic-aids"]
            }
          }
        },
        {
          "name": "Obtener Todos los Medicamentos",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/medications",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "medications"]
            },
            "description": "Lista todos los medicamentos disponibles"
          }
        },
        {
          "name": "Obtener Medicamento por ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/medications/1",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "medications", "1"]
            },
            "description": "Obtiene un medicamento específico por su ID"
          }
        },
        {
          "name": "Actualizar Medicamento",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Paracetamol 500mg Actualizado\",\n  \"description\": \"Analgésico y antipirético - Actualizado\",\n  \"cost\": 1800.0,\n  \"quantity\": 200,\n  \"dosage\": \"500mg\",\n  \"duration\": \"8 horas\",\n  \"frequency\": \"Cada 8 horas\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/medications/1",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "medications", "1"]
            },
            "description": "Actualiza información de un medicamento"
          }
        },
        {
          "name": "Eliminar Medicamento",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/medications/1",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "medications", "1"]
            },
            "description": "Elimina un medicamento del inventario"
          }
        },
        {
          "name": "Obtener Todos los Procedimientos",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/procedures",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "procedures"]
            },
            "description": "Lista todos los procedimientos médicos disponibles"
          }
        },
        {
          "name": "Obtener Procedimiento por ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/procedures/1",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "procedures", "1"]
            },
            "description": "Obtiene un procedimiento específico por su ID"
          }
        },
        {
          "name": "Actualizar Procedimiento",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Radiografía de tórax - Actualizada\",\n  \"description\": \"Estudio radiológico del tórax - Actualizado\",\n  \"cost\": 55000.0,\n  \"quantity\": 1,\n  \"frequency\": \"Según necesidad médica\",\n  \"repetitions\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/procedures/1",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "procedures", "1"]
            },
            "description": "Actualiza información de un procedimiento"
          }
        },
        {
          "name": "Eliminar Procedimiento",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/procedures/1",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "procedures", "1"]
            },
            "description": "Elimina un procedimiento del inventario"
          }
        },
        {
          "name": "Obtener Todas las Ayudas Diagnósticas",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/diagnostic-aids",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "diagnostic-aids"]
            },
            "description": "Lista todas las ayudas diagnósticas disponibles"
          }
        },
        {
          "name": "Obtener Ayuda Diagnóstica por ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/diagnostic-aids/1",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "diagnostic-aids", "1"]
            },
            "description": "Obtiene una ayuda diagnóstica específica por su ID"
          }
        },
        {
          "name": "Actualizar Ayuda Diagnóstica",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Glucómetro Premium\",\n  \"description\": \"Dispositivo avanzado para medir niveles de glucosa con mayor precisión\",\n  \"cost\": 95000.0,\n  \"quantity\": 8\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/diagnostic-aids/1",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "diagnostic-aids", "1"]
            },
            "description": "Actualiza información de una ayuda diagnóstica"
          }
        },
        {
          "name": "Eliminar Ayuda Diagnóstica",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/diagnostic-aids/1",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "diagnostic-aids", "1"]
            },
            "description": "Elimina una ayuda diagnóstica del inventario"
          }
        },
        {
          "name": "Eliminar Ítem de Inventario",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/1?type=MEDICATION",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "1"],
              "query": [
                {
                  "key": "type",
                  "value": "MEDICATION",
                  "description": "Tipo de ítem de inventario"
                }
              ]
            },
            "description": "Elimina un ítem genérico del inventario"
          }
        }
      ]
    },
    {
      "name": "Órdenes Médicas",
      "description": "Gestión completa de órdenes médicas",
      "item": [
        {
          "name": "Crear Orden Médica",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Role",
                "value": "MEDICO",
                "description": "Solo médicos pueden crear órdenes"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patientId\": 1,\n  \"doctorId\": 1,\n  \"items\": [\n    {\n      \"type\": \"MEDICATION\",\n      \"id\": 1,\n      \"quantity\": 2,\n      \"instructions\": \"Tomar cada 8 horas\"\n    },\n    {\n      \"type\": \"PROCEDURE\",\n      \"id\": 1,\n      \"quantity\": 1,\n      \"instructions\": \"Realizar antes del tratamiento\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            }
          }
        },
        {
          "name": "Obtener Todas las Órdenes",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Solo médicos y soporte pueden consultar órdenes"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            }
          }
        },
        {
          "name": "Obtener Orden por Número",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Rol del usuario que consulta"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/ORD-001",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "ORD-001"]
            }
          }
        },
        {
          "name": "Actualizar Orden",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Role",
                "value": "MEDICO",
                "description": "Solo médicos pueden actualizar órdenes"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patientId\": 1,\n  \"doctorId\": 1,\n  \"items\": [\n    {\n      \"type\": \"MEDICATION\",\n      \"id\": 1,\n      \"quantity\": 3,\n      \"instructions\": \"Tomar cada 8 horas - dosis aumentada\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/ORD-001",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "ORD-001"]
            }
          }
        },
        {
          "name": "Eliminar Orden",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Solo médicos y soporte pueden eliminar órdenes"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/ORD-001",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "ORD-001"]
            }
          }
        },
        {
          "name": "Agregar Ítem a Orden",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Solo médicos y enfermeras pueden modificar ítems"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"MEDICATION\",\n  \"id\": 2,\n  \"quantity\": 1,\n  \"instructions\": \"Tomar en caso de fiebre\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/ORD-001/items",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "ORD-001", "items"]
            }
          }
        },
        {
          "name": "Eliminar Ítem de Orden",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Solo médicos y enfermeras pueden modificar ítems"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/ORD-001/items/1",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "ORD-001", "items", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "Historial Médico",
      "description": "Gestión del historial médico de pacientes",
      "item": [
        {
          "name": "Crear/Actualizar Visita Médica",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Solo médicos y enfermeras pueden crear visitas"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctorId\": 1,\n  \"diagnosis\": \"Hipertensión arterial\",\n  \"symptoms\": \"Dolor de cabeza, mareos\",\n  \"treatment\": \"Medicación antihipertensiva\",\n  \"notes\": \"Paciente estable, continuar tratamiento\",\n  \"vitalSigns\": {\n    \"bloodPressure\": \"140/90\",\n    \"heartRate\": 75,\n    \"temperature\": 36.5,\n    \"weight\": 70.5,\n    \"height\": 175\n  },\n  \"prescriptions\": [\n    {\n      \"medicationId\": 1,\n      \"dosage\": \"1 tableta\",\n      \"frequency\": \"Cada 12 horas\",\n      \"duration\": \"30 días\"\n    }\n  ],\n  \"procedures\": [\n    {\n      \"procedureId\": 1,\n      \"notes\": \"Control de rutina\"\n    }\n  ],\n  \"diagnosticAids\": [\n    {\n      \"diagnosticAidId\": 1,\n      \"results\": \"Normales\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/medical-history/87654321",
              "host": ["{{baseUrl}}"],
              "path": ["medical-history", "87654321"]
            }
          }
        },
        {
          "name": "Obtener Historial por Paciente",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/medical-history/87654321",
              "host": ["{{baseUrl}}"],
              "path": ["medical-history", "87654321"]
            }
          }
        },
        {
          "name": "Eliminar Visita",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/medical-history/87654321/2024-01-15T00:00:00",
              "host": ["{{baseUrl}}"],
              "path": ["medical-history", "87654321", "2024-01-15T00:00:00"]
            }
          }
        },
        {
          "name": "Eliminar Historial Completo",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/medical-history/87654321",
              "host": ["{{baseUrl}}"],
              "path": ["medical-history", "87654321"]
            }
          }
        }
      ]
    },
    {
      "name": "Citas Médicas",
      "description": "Gestión completa de citas médicas",
      "item": [
        {
          "name": "Crear Cita Médica",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Rol del usuario que crea la cita"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patientId\": {{patientId}},\n  \"doctorId\": {{doctorId}},\n  \"appointmentDate\": \"2024-02-15T10:30:00Z\",\n  \"appointmentType\": \"CONSULTA_GENERAL\",\n  \"notes\": \"Control de rutina mensual\",\n  \"duration\": 30\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/appointments",
              "host": ["{{baseUrl}}"],
              "path": ["appointments"]
            },
            "description": "Crea una nueva cita médica en el sistema"
          }
        },
        {
          "name": "Obtener Todas las Citas",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "{{userRole}}",
                "description": "Rol del usuario que consulta"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/appointments",
              "host": ["{{baseUrl}}"],
              "path": ["appointments"]
            },
            "description": "Lista todas las citas médicas del sistema"
          }
        }
      ]
    },
    {
      "name": "📊 Monitoreo y Health Checks",
      "description": "Endpoints de monitoreo y métricas del sistema",
      "item": [
        {
          "name": "Health Check - General",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/health",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "health"]
            },
            "description": "Verifica el estado general de la aplicación"
          }
        },
        {
          "name": "Health Check - Detallado",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "ADMINISTRATIVO",
                "description": "Solo administradores pueden ver detalles"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/actuator/health?details=true",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "health"],
              "query": [
                {
                  "key": "details",
                  "value": "true",
                  "description": "Mostrar detalles de cada componente"
                }
              ]
            },
            "description": "Health check detallado con estado de cada componente"
          }
        },
        {
          "name": "Application Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/info",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "info"]
            },
            "description": "Información general de la aplicación"
          }
        },
        {
          "name": "Métricas de Performance",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "ADMINISTRATIVO",
                "description": "Solo administradores pueden ver métricas"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/actuator/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "metrics"]
            },
            "description": "Métricas de performance del sistema"
          }
        },
        {
          "name": "Configuración de Entorno",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "ADMINISTRATIVO",
                "description": "Solo administradores pueden ver configuración"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/actuator/env",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "env"]
            },
            "description": "Variables de entorno y configuración del sistema"
          }
        },
        {
          "name": "Propiedades de Configuración",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "ADMINISTRATIVO",
                "description": "Solo administradores pueden ver propiedades"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/actuator/configprops",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "configprops"]
            },
            "description": "Propiedades de configuración de Spring Boot"
          }
        },
        {
          "name": "Métricas HTTP",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "ADMINISTRATIVO",
                "description": "Solo administradores pueden ver métricas HTTP"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/actuator/metrics/http.server.requests",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "metrics", "http.server.requests"]
            },
            "description": "Métricas de requests HTTP"
          }
        },
        {
          "name": "Métricas de Base de Datos",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "ADMINISTRATIVO",
                "description": "Solo administradores pueden ver métricas de BD"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/actuator/metrics/jdbc.connections.active",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "metrics", "jdbc.connections.active"]
            },
            "description": "Métricas de conexiones activas a base de datos"
          }
        }
      ]
    },
    {
      "name": "🔧 Utilidades del Sistema",
      "description": "Endpoints de utilidad y herramientas del sistema",
      "item": [
        {
          "name": "Verificar Conexión con Base de Datos",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/health/db",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "health", "db"]
            },
            "description": "Verifica el estado de la conexión con la base de datos"
          }
        },
        {
          "name": "Verificar Conexión con MongoDB",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/health/mongo",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "health", "mongo"]
            },
            "description": "Verifica el estado de la conexión con MongoDB"
          }
        },
        {
          "name": "Información del Sistema",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/info",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "info"]
            },
            "description": "Información general del sistema y versión"
          }
        }
      ]
    },
    {
      "name": "🔍 Búsquedas Avanzadas",
      "description": "Endpoints de búsqueda y consultas especializadas",
      "item": [
        {
          "name": "Buscar Paciente por Cédula",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "MEDICO",
                "description": "Médicos y personal autorizado"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/patients/search?cedula=1234567890",
              "host": ["{{baseUrl}}"],
              "path": ["api", "patients", "search"],
              "query": [
                {
                  "key": "cedula",
                  "value": "1234567890",
                  "description": "Número de cédula del paciente"
                }
              ]
            },
            "description": "Busca un paciente específico por su número de cédula"
          }
        },
        {
          "name": "Historial Clínico por Paciente",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "MEDICO",
                "description": "Solo personal médico autorizado"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/medical-history/patient/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "medical-history", "patient", "1"]
            },
            "description": "Obtiene el historial médico completo de un paciente"
          }
        },
        {
          "name": "Seguros por Paciente",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "ADMINISTRATIVO",
                "description": "Personal administrativo y médicos"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/insurance/patient/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "insurance", "patient", "1"]
            },
            "description": "Obtiene la información de seguros de un paciente"
          }
        },
        {
          "name": "Órdenes Médicas por Paciente",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "MEDICO",
                "description": "Solo personal médico autorizado"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders/patient/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "patient", "1"]
            },
            "description": "Obtiene todas las órdenes médicas de un paciente"
          }
        },
        {
          "name": "Facturación por Paciente",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "ADMINISTRATIVO",
                "description": "Personal administrativo autorizado"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/billing/patient/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "billing", "patient", "1"]
            },
            "description": "Obtiene el historial de facturación de un paciente"
          }
        },
        {
          "name": "Buscar Medicamentos por Nombre",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/inventory/medications/search?name=paracetamol",
              "host": ["{{baseUrl}}"],
              "path": ["api", "inventory", "medications", "search"],
              "query": [
                {
                  "key": "name",
                  "value": "paracetamol",
                  "description": "Nombre del medicamento a buscar"
                }
              ]
            },
            "description": "Busca medicamentos por nombre en el inventario"
          }
        },
        {
          "name": "Buscar Procedimientos por Especialidad",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/inventory/procedures/search?specialty=CARDIOLOGIA",
              "host": ["{{baseUrl}}"],
              "path": ["api", "inventory", "procedures", "search"],
              "query": [
                {
                  "key": "specialty",
                  "value": "CARDIOLOGIA",
                  "description": "Especialidad médica para filtrar procedimientos"
                }
              ]
            },
            "description": "Busca procedimientos por especialidad médica"
          }
        }
      ]
    },
    {
      "name": "📈 Reportes y Estadísticas",
      "description": "Endpoints para reportes y análisis de datos",
      "item": [
        {
          "name": "Estadísticas de Pacientes",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "ADMINISTRATIVO",
                "description": "Solo administradores pueden ver estadísticas"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/reports/patients/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reports", "patients", "stats"]
            },
            "description": "Estadísticas generales de pacientes registrados"
          }
        },
        {
          "name": "Estadísticas de Citas",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "ADMINISTRATIVO",
                "description": "Solo administradores pueden ver estadísticas"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/reports/appointments/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reports", "appointments", "stats"]
            },
            "description": "Estadísticas de citas médicas programadas"
          }
        },
        {
          "name": "Reporte de Inventario Bajo Stock",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "ADMINISTRATIVO",
                "description": "Personal autorizado para ver inventario"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/reports/inventory/low-stock",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reports", "inventory", "low-stock"]
            },
            "description": "Reporte de items con stock bajo en inventario"
          }
        },
        {
          "name": "Reporte de Facturación Mensual",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Role",
                "value": "ADMINISTRATIVO",
                "description": "Solo administradores pueden ver reportes financieros"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/reports/billing/monthly?year=2024&month=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reports", "billing", "monthly"],
              "query": [
                {
                  "key": "year",
                  "value": "2024",
                  "description": "Año para el reporte"
                },
                {
                  "key": "month",
                  "value": "10",
                  "description": "Mes para el reporte (1-12)"
                }
              ]
            },
            "description": "Reporte de facturación para un mes específico"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// ===============================================",
          "// 🏥 CLINIC IPS - Pre-request Script Enterprise",
          "// ===============================================",
          "// Configuración automática avanzada con logging y validación",
          "",
          "// 🎯 Configuración Global",
          "const CONFIG = {",
          "    DEBUG_MODE: true,",
          "    LOG_REQUESTS: true,",
          "    LOG_HEADERS: true,",
          "    VALIDATE_JSON: true,",
          "    AUTO_RETRY: false",
          "};",
          "",
          "// 🔧 Función para logging estructurado",
          "function log(level, message, data = null) {",
          "    if (!CONFIG.DEBUG_MODE && level === 'debug') return;",
          "    ",
          "    const timestamp = new Date().toISOString();",
          "    const emoji = { info: 'ℹ️', warn: '⚠️', error: '❌', debug: '🔍', success: '✅' }[level] || '📝';",
          "    console.log(`${emoji} [${timestamp}] ${message}`);",
          "    if (data && CONFIG.DEBUG_MODE) {",
          "        console.log(JSON.stringify(data, null, 2));",
          "    }",
          "}",
          "",
          "// 🔐 Función para configurar headers de autenticación",
          "function configureAuthHeaders() {",
          "    const authToken = pm.variables.get('authToken');",
          "    const userRole = pm.variables.get('userRole');",
          "    const currentUsername = pm.variables.get('currentUsername');",
          "    const requestUrl = pm.request.url.toString();",
          "",
          "    // Headers básicos",
          "    pm.request.headers.upsert({",
          "        key: 'Accept',",
          "        value: 'application/json'",
          "    });",
          "",
          "    // Headers de autenticación",
          "    if (authToken && authToken.trim() !== '') {",
          "        pm.request.headers.upsert({",
          "            key: 'Authorization',",
          "            value: `Bearer ${authToken}`",
          "        });",
          "        log('debug', 'Auth token configured', { tokenLength: authToken.length });",
          "    } else {",
          "        log('warn', 'No auth token available');",
          "    }",
          "",
          "    // Headers de rol (excepto para endpoints públicos)",
          "    if (userRole && userRole.trim() !== '' && !isPublicEndpoint(requestUrl)) {",
          "        pm.request.headers.upsert({",
          "            key: 'Role',",
          "            value: userRole",
          "        });",
          "        log('debug', 'User role configured', { role: userRole });",
          "    }",
          "",
          "    // Headers de usuario",
          "    if (currentUsername && currentUsername.trim() !== '') {",
          "        pm.request.headers.upsert({",
          "            key: 'X-Username',",
          "            value: currentUsername",
          "        });",
          "    }",
          "",
          "    // Headers de ambiente",
          "    const environment = pm.variables.get('environment');",
          "    if (environment) {",
          "        pm.request.headers.upsert({",
          "            key: 'X-Environment',",
          "            value: environment",
          "        });",
          "    }",
          "}",
          "",
          "// 🚫 Función para identificar endpoints públicos",
          "function isPublicEndpoint(url) {",
          "    const publicPatterns = [",
          "        '/authenticate',",
          "        '/actuator/health',",
          "        '/actuator/info',",
          "        '/h2-console'",
          "    ];",
          "",
          "    return publicPatterns.some(pattern => url.includes(pattern));",
          "}",
          "",
          "// 📝 Función para configurar headers de contenido",
          "function configureContentHeaders() {",
          "    if (pm.request.body && pm.request.body.mode === 'raw') {",
          "        pm.request.headers.upsert({",
          "            key: 'Content-Type',",
          "            value: 'application/json'",
          "        });",
          "    }",
          "",
          "    // Headers adicionales para debugging",
          "    if (CONFIG.DEBUG_MODE) {",
          "        pm.request.headers.upsert({",
          "            key: 'X-Postman-Request',",
          "            value: 'true'",
          "        });",
          "    }",
          "}",
          "",
          "// 🔄 Función para manejar endpoints especiales",
          "function handleSpecialEndpoints() {",
          "    const requestUrl = pm.request.url.toString();",
          "    const method = pm.request.method;",
          "",
          "    // Login - No requiere autenticación",
          "    if (requestUrl.includes('/authenticate')) {",
          "        pm.request.headers.remove('Authorization');",
          "        pm.request.headers.remove('Role');",
          "        pm.request.headers.remove('X-Username');",
          "        log('info', 'Authentication endpoint - removed auth headers');",
          "        return;",
          "    }",
          "",
          "    // Health checks - Mínimos headers",
          "    if (requestUrl.includes('/actuator/health')) {",
          "        pm.request.headers.remove('Role');",
          "        pm.request.headers.remove('X-Username');",
          "        log('info', 'Health check endpoint - minimal headers');",
          "        return;",
          "    }",
          "",
          "    // Endpoints públicos",
          "    const publicEndpoints = ['/insurances', '/billings'];",
          "    const isPublicEndpoint = publicEndpoints.some(endpoint => requestUrl.includes(endpoint));",
          "    if (isPublicEndpoint && !requestUrl.includes('/patient/')) {",
          "        pm.request.headers.remove('Role');",
          "        log('info', 'Public endpoint - role not required');",
          "    }",
          "}",
          "",
          "// ✅ Función para validar JSON body",
          "function validateRequestBody() {",
          "    if (!pm.request.body || pm.request.body.mode !== 'raw') return true;",
          "    ",
          "    try {",
          "        const body = pm.request.body.raw;",
          "        if (body && body.trim() !== '') {",
          "            JSON.parse(body);",
          "            log('debug', 'Request body JSON is valid');",
          "            return true;",
          "        }",
          "    } catch (error) {",
          "        log('error', 'Invalid JSON in request body', { error: error.message });",
          "        return false;",
          "    }",
          "    return true;",
          "}",
          "",
          "// 📊 Función para logging de request",
          "function logRequestDetails() {",
          "    if (!CONFIG.LOG_REQUESTS) return;",
          "    ",
          "    const requestInfo = {",
          "        method: pm.request.method,",
          "        url: pm.request.url.toString(),",
          "        headers: CONFIG.LOG_HEADERS ? pm.request.headers.toObject() : 'hidden',",
          "        body: pm.request.body ? pm.request.body.raw : null",
          "    };",
          "",
          "    log('info', 'Request prepared', requestInfo);",
          "}",
          "",
          "// 🎯 Función principal de ejecución",
          "function main() {",
          "    try {",
          "        log('debug', 'Starting pre-request script');",
          "",
          "        // Validar JSON body",
          "        if (CONFIG.VALIDATE_JSON && !validateRequestBody()) {",
          "            throw new Error('Invalid JSON in request body');",
          "        }",
          "",
          "        // Configurar headers",
          "        configureAuthHeaders();",
          "        configureContentHeaders();",
          "        handleSpecialEndpoints();",
          "",
          "        // Logging final",
          "        logRequestDetails();",
          "",
          "        log('success', 'Pre-request script completed successfully');",
          "    } catch (error) {",
          "        log('error', 'Pre-request script failed', { error: error.message });",
          "        throw error;",
          "    }",
          "}",
          "",
          "// 🚀 Ejecutar script principal",
          "main();"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// ===============================================",
          "// 🏥 CLINIC IPS - Test Script Enterprise",
          "// ===============================================",
          "// Validaciones avanzadas, métricas y debugging profesional",
          "",
          "// 🎯 Configuración de Tests",
          "const TEST_CONFIG = {",
          "    PERFORMANCE_THRESHOLD: 3000, // 3 segundos",
          "    VALIDATE_JSON_SCHEMA: true,",
          "    VALIDATE_DATE_FORMATS: true,",
          "    VALIDATE_EMAIL_FORMATS: true,",
          "    VALIDATE_CEDULA_FORMATS: true,",
          "    LOG_RESPONSE_DETAILS: true,",
          "    CHECK_CONTENT_LENGTH: true,",
          "    VALIDATE_STATUS_CODES: true",
          "};",
          "",
          "// 📊 Función para logging estructurado",
          "function log(level, message, data = null) {",
          "    const timestamp = new Date().toISOString();",
          "    const emoji = { info: 'ℹ️', warn: '⚠️', error: '❌', debug: '🔍', success: '✅', perf: '⚡' }[level] || '📝';",
          "    console.log(`${emoji} [${timestamp}] ${message}`);",
          "    if (data) {",
          "        console.log(JSON.stringify(data, null, 2));",
          "    }",
          "}",
          "",
          "// 🔍 Función para obtener información de response",
          "function getResponseInfo() {",
          "    return {",
          "        statusCode: pm.response.code,",
          "        responseTime: pm.response.responseTime,",
          "        contentType: pm.response.headers.get('Content-Type'),",
          "        contentLength: pm.response.headers.get('Content-Length'),",
          "        requestUrl: pm.request.url.toString(),",
          "        requestMethod: pm.request.method",
          "    };",
          "}",
          "",
          "// ✅ Tests básicos de infraestructura",
          "function runInfrastructureTests() {",
          "    const info = getResponseInfo();",
          "",
          "    log('info', 'Response received', info);",
          "",
          "    // Test de status code válido",
          "    pm.test('Status code is valid', function () {",
          "        const validCodes = [200, 201, 204, 400, 401, 403, 404, 422, 500];",
          "        pm.expect(info.statusCode).to.be.oneOf(validCodes, `Status ${info.statusCode} is not expected`);",
          "    });",
          "",
          "    // Test de performance",
          "    pm.test('Response time is acceptable', function () {",
          "        pm.expect(info.responseTime).to.be.below(TEST_CONFIG.PERFORMANCE_THRESHOLD,",
          "            `Response time ${info.responseTime}ms exceeds threshold of ${TEST_CONFIG.PERFORMANCE_THRESHOLD}ms`);",
          "        log('perf', 'Performance test passed', { responseTime: info.responseTime });",
          "    });",
          "",
          "    // Test de headers",
          "    pm.test('Response has appropriate headers', function () {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.not.be.null;",
          "    });",
          "",
          "    // Test de JSON válido",
          "    if (info.contentType && info.contentType.includes('application/json')) {",
          "        pm.test('Response is valid JSON', function () {",
          "            pm.response.to.be.json;",
          "        });",
          "    }",
          "}",
          "",
          "// 🔐 Tests de autenticación",
          "function runAuthTests() {",
          "    const info = getResponseInfo();",
          "    const requestUrl = info.requestUrl;",
          "",
          "    if (info.statusCode === 200 && requestUrl.includes('/authenticate')) {",
          "        const response = pm.response.json();",
          "",
          "        pm.test('Authentication response has required fields', function () {",
          "            pm.expect(response).to.have.property('token');",
          "            pm.expect(response).to.have.property('username');",
          "            pm.expect(response).to.have.property('role');",
          "            pm.expect(response.token).to.be.a('string').and.not.be.empty;",
          "            pm.expect(response.username).to.be.a('string').and.not.be.empty;",
          "            pm.expect(response.role).to.be.a('string').and.not.be.empty;",
          "        });",
          "",
          "        // Guardar token automáticamente",
          "        if (response && response.token) {",
          "            pm.variables.set('authToken', response.token);",
          "            pm.variables.set('currentUsername', response.username);",
          "            log('success', 'Auth token saved automatically', {",
          "                username: response.username,",
          "                role: response.role,",
          "                tokenLength: response.token.length",
          "            });",
          "        }",
          "    }",
          "}",
          "",
          "// 📋 Tests específicos por status code",
          "function runStatusSpecificTests() {",
          "    const info = getResponseInfo();",
          "    const statusCode = info.statusCode;",
          "",
          "    // Tests para respuestas exitosas",
          "    if (statusCode === 200) {",
          "        pm.test('200 OK - Response has content', function () {",
          "            if (TEST_CONFIG.CHECK_CONTENT_LENGTH && info.contentLength) {",
          "                pm.expect(parseInt(info.contentLength)).to.be.above(0);",
          "            }",
          "        });",
          "",
          "        // Validar listas",
          "        validateListResponses();",
          "    }",
          "",
          "    // Tests para creación de recursos",
          "    if (statusCode === 201) {",
          "        pm.test('201 Created - Resource created successfully', function () {",
          "            pm.expect(pm.response.text()).to.not.be.empty;",
          "        });",
          "    }",
          "",
          "    // Tests para eliminación",
          "    if (statusCode === 204) {",
          "        pm.test('204 No Content - Resource deleted successfully', function () {",
          "            pm.expect(pm.response.text()).to.be.empty;",
          "        });",
          "    }",
          "",
          "    // Tests para errores",
          "    if (statusCode >= 400) {",
          "        pm.test('Error response has proper structure', function () {",
          "            if (info.contentType && info.contentType.includes('application/json')) {",
          "                const errorResponse = pm.response.json();",
          "                if (errorResponse) {",
          "                    pm.expect(errorResponse).to.have.property('error');",
          "                    pm.expect(errorResponse).to.have.property('message');",
          "                    pm.expect(errorResponse).to.have.property('status');",
          "                    pm.expect(errorResponse.message).to.be.a('string').and.not.be.empty;",
          "                }",
          "            }",
          "        });",
          "    }",
          "}",
          "",
          "// 📊 Validación de respuestas de listas",
          "function validateListResponses() {",
          "    const info = getResponseInfo();",
          "    const requestUrl = info.requestUrl;",
          "",
          "    if (info.statusCode === 200) {",
          "        const listEndpoints = ['/users', '/patients', '/appointments', '/insurances', '/billings', '/inventory'];",
          "        const isListEndpoint = listEndpoints.some(endpoint => requestUrl.includes(endpoint));",
          "",
          "        if (isListEndpoint) {",
          "            const response = pm.response.json();",
          "            if (Array.isArray(response)) {",
          "                pm.test('List response is array', function () {",
          "                    pm.expect(response).to.be.an('array');",
          "                });",
          "",
          "                if (response.length > 0) {",
          "                    pm.test('List contains items', function () {",
          "                        pm.expect(response.length).to.be.above(0);",
          "                    });",
          "",
          "                    // Validar estructura de items",
          "                    pm.test('List items have required structure', function () {",
          "                        response.forEach((item, index) => {",
          "                            pm.expect(item).to.have.property('id');",
          "                            pm.expect(item.id).to.be.a('number');",
          "                        });",
          "                    });",
          "                }",
          "            }",
          "        }",
          "    }",
          "}",
          "",
          "// 📅 Validación de formatos de fecha",
          "function validateDateFormats() {",
          "    if (!TEST_CONFIG.VALIDATE_DATE_FORMATS) return;",
          "",
          "    const response = pm.response.json();",
          "    if (!response) return;",
          "",
          "    function checkDateFields(obj, path = '') {",
          "        for (const [key, value] of Object.entries(obj)) {",
          "            const currentPath = path ? `${path}.${key}` : key;",
          "",
          "            if (typeof value === 'string' && value.trim() !== '') {",
          "                // Campos que deberían ser fechas",
          "                if (key.toLowerCase().includes('date') || key.toLowerCase().includes('time') || key.includes('Date') || key.includes('Time')) {",
          "                    const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z?$/;",
          "                    if (!iso8601Regex.test(value)) {",
          "                        log('warn', 'Date field not in ISO 8601 format', { field: currentPath, value: value });",
          "                    } else {",
          "                        log('debug', 'Date field valid', { field: currentPath, value: value });",
          "                    }",
          "                }",
          "            }",
          "",
          "            if (typeof value === 'object' && value !== null) {",
          "                checkDateFields(value, currentPath);",
          "            }",
          "        }",
          "    }",
          "",
          "    checkDateFields(response);",
          "}",
          "",
          "// 📧 Validación de formatos de email",
          "function validateEmailFormats() {",
          "    if (!TEST_CONFIG.VALIDATE_EMAIL_FORMATS) return;",
          "",
          "    const response = pm.response.json();",
          "    if (!response) return;",
          "",
          "    function checkEmailFields(obj, path = '') {",
          "        for (const [key, value] of Object.entries(obj)) {",
          "            const currentPath = path ? `${path}.${key}` : key;",
          "",
          "            if (typeof value === 'string' && value.trim() !== '') {",
          "                if (key.toLowerCase().includes('email')) {",
          "                    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
          "                    if (!emailRegex.test(value)) {",
          "                        log('warn', 'Email field has invalid format', { field: currentPath, value: value });",
          "                    }",
          "                }",
          "            }",
          "",
          "            if (typeof value === 'object' && value !== null) {",
          "                checkEmailFields(value, currentPath);",
          "            }",
          "        }",
          "    }",
          "",
          "    checkEmailFields(response);",
          "}",
          "",
          "// 🆔 Validación de formatos de cédula",
          "function validateCedulaFormats() {",
          "    if (!TEST_CONFIG.VALIDATE_CEDULA_FORMATS) return;",
          "",
          "    const response = pm.response.json();",
          "    if (!response) return;",
          "",
          "    function checkCedulaFields(obj, path = '') {",
          "        for (const [key, value] of Object.entries(obj)) {",
          "            const currentPath = path ? `${path}.${key}` : key;",
          "",
          "            if (typeof value === 'string' && value.trim() !== '') {",
          "                if (key.toLowerCase().includes('cedula') || key.toLowerCase().includes('document')) {",
          "                    if (!/^\\d{8,10}$/.test(value)) {",
          "                        log('warn', 'Cedula field has invalid format', { field: currentPath, value: value });",
          "                    }",
          "                }",
          "            }",
          "",
          "            if (typeof value === 'object' && value !== null) {",
          "                checkCedulaFields(value, currentPath);",
          "            }",
          "        }",
          "    }",
          "",
          "    checkCedulaFields(response);",
          "}",
          "",
          "// 🔍 Validación de schema JSON",
          "function validateJsonSchema() {",
          "    if (!TEST_CONFIG.VALIDATE_JSON_SCHEMA) return;",
          "",
          "    const info = getResponseInfo();",
          "    const requestUrl = info.requestUrl;",
          "",
          "    if (info.statusCode === 200 && info.contentType && info.contentType.includes('application/json')) {",
          "        const response = pm.response.json();",
          "",
          "        // Schema básico para diferentes endpoints",
          "        if (requestUrl.includes('/users')) {",
          "            validateUserSchema(response);",
          "        } else if (requestUrl.includes('/patients')) {",
          "            validatePatientSchema(response);",
          "        } else if (requestUrl.includes('/appointments')) {",
          "            validateAppointmentSchema(response);",
          "        }",
          "    }",
          "}",
          "",
          "// 📋 Validaciones de schema específicas",
          "function validateUserSchema(data) {",
          "    if (Array.isArray(data)) {",
          "        data.forEach(user => validateSingleUserSchema(user));",
          "    } else {",
          "        validateSingleUserSchema(data);",
          "    }",
          "",
          "    function validateSingleUserSchema(user) {",
          "        if (user) {",
          "            pm.test('User has required fields', function () {",
          "                pm.expect(user).to.have.property('id');",
          "                pm.expect(user).to.have.property('username');",
          "                pm.expect(user).to.have.property('fullName');",
          "                pm.expect(user).to.have.property('role');",
          "            });",
          "        }",
          "    }",
          "}",
          "",
          "function validatePatientSchema(data) {",
          "    if (Array.isArray(data)) {",
          "        data.forEach(patient => validateSinglePatientSchema(patient));",
          "    } else {",
          "        validateSinglePatientSchema(data);",
          "    }",
          "",
          "    function validateSinglePatientSchema(patient) {",
          "        if (patient) {",
          "            pm.test('Patient has required fields', function () {",
          "                pm.expect(patient).to.have.property('id');",
          "                pm.expect(patient).to.have.property('cedula');",
          "                pm.expect(patient).to.have.property('fullName');",
          "                pm.expect(patient).to.have.property('email');",
          "            });",
          "        }",
          "    }",
          "}",
          "",
          "function validateAppointmentSchema(data) {",
          "    if (Array.isArray(data)) {",
          "        data.forEach(appointment => validateSingleAppointmentSchema(appointment));",
          "    } else {",
          "        validateSingleAppointmentSchema(data);",
          "    }",
          "",
          "    function validateSingleAppointmentSchema(appointment) {",
          "        if (appointment) {",
          "            pm.test('Appointment has required fields', function () {",
          "                pm.expect(appointment).to.have.property('id');",
          "                pm.expect(appointment).to.have.property('patientCedula');",
          "                pm.expect(appointment).to.have.property('doctorCedula');",
          "                pm.expect(appointment).to.have.property('dateTime');",
          "            });",
          "        }",
          "    }",
          "}",
          "",
          "// 🎯 Función principal de ejecución",
          "function main() {",
          "    try {",
          "        log('debug', 'Starting test script');",
          "",
          "        // Ejecutar todos los tests",
          "        runInfrastructureTests();",
          "        runAuthTests();",
          "        runStatusSpecificTests();",
          "        validateDateFormats();",
          "        validateEmailFormats();",
          "        validateCedulaFormats();",
          "        validateJsonSchema();",
          "",
          "        log('success', 'Test script completed successfully');",
          "        log('info', 'Test summary', {",
          "            url: pm.request.url.toString(),",
          "            method: pm.request.method,",
          "            status: pm.response.code,",
          "            time: pm.response.responseTime + 'ms'",
          "        });",
          "",
          "    } catch (error) {",
          "        log('error', 'Test script failed', { error: error.message });",
          "        pm.test('Test script execution', function () {",
          "            pm.expect(error).to.not.exist;",
          "        });",
          "    }",
          "}",
          "",
          "// 🚀 Ejecutar tests principales",
          "main();"
        ]
      }
    }
  ]
}